#include "matrix.h"

#test create_1
matrix_t A = {0};
int res = create_matrix(3, 3, &A);    
ck_assert_int_eq(res, OK);
remove_matrix(&A);

#test create_2
matrix_t A = {0};
int res = create_matrix(-3, 3, &A);
ck_assert_int_eq(res, INCORRECT_MATRIX);


#test create_3
matrix_t A = {0};
int res = create_matrix(1, 0, &A);
ck_assert_int_eq(res, INCORRECT_MATRIX);

#test eq_1
matrix_t A = {0}, B = {0};
create_matrix(2, 2, &A);
create_matrix(2, 2, &B);
int res = eq_matrix(&A, &B);
ck_assert_int_eq(res, SUCCESS);
remove_matrix(&A);
remove_matrix(&B);

#test eq_2
matrix_t A = {0}, B = {0};
create_matrix(0, 2, &A);
create_matrix(2, 2, &B);
int res = eq_matrix(&A, &B);
ck_assert_int_eq(res, FAILURE);
remove_matrix(&A);
remove_matrix(&B);

#test eq_3
matrix_t A = {0}, B = {0};
create_matrix(2, 2, &A);
create_matrix(2, 2, &B);
A.matrix[0][1] = 0.0000001;
int res = eq_matrix(&A, &B);
ck_assert_int_eq(res, FAILURE);
remove_matrix(&A);
remove_matrix(&B);

#test sum_1
matrix_t A = {0}, B = {0}, C = {0}, D = {0};
create_matrix(2, 2, &A);
create_matrix(2, 2, &B);
create_matrix(2, 2, &D);

A.matrix[0][0] = 0.525;
A.matrix[0][1] = 1.525;
A.matrix[1][0] = 2.525;
A.matrix[1][1] = 3.525;

B.matrix[0][0] = 4.525;
B.matrix[0][1] = 5.525;
B.matrix[1][0] = -6.525;
B.matrix[1][1] = -7.525;

int res = sum_matrix(&A, &B, &C);

D.matrix[0][0] = 5.05;
D.matrix[0][1] = 7.05;
D.matrix[1][0] = -4.0;
D.matrix[1][1] = -4.0;

ck_assert_int_eq(eq_matrix(&C, &D), SUCCESS);
remove_matrix(&A);
remove_matrix(&B);
remove_matrix(&C);
remove_matrix(&D);

#test sum_2
matrix_t A = {0}, B = {0}, C = {0};
create_matrix(2, 2, &A);
create_matrix(2, 1, &B);

A.matrix[0][0] = 0.525;
A.matrix[0][1] = 1.525;
A.matrix[1][0] = 2.525;
A.matrix[1][1] = 3.525;

B.matrix[0][0] = 4.525;
B.matrix[1][0] = -6.525;

int res = sum_matrix(&A, &B, &C);

ck_assert_int_eq(res, CALCULATION_ERROR);
remove_matrix(&A);
remove_matrix(&B);

#test sum_3
matrix_t A = {0}, B = {0}, C = {0};
create_matrix(2, 2, &A);
create_matrix(2, 0, &B);
ck_assert_int_eq(sum_matrix(&A, &B, &C), INCORRECT_MATRIX);
remove_matrix(&A);

#test sub_1
matrix_t A = {0}, B = {0}, C = {0}, D = {0};
create_matrix(2, 2, &A);
create_matrix(2, 2, &B);
create_matrix(2, 2, &D);

A.matrix[0][0] = 0.525;
A.matrix[0][1] = 1.525;
A.matrix[1][0] = 2.525;
A.matrix[1][1] = 3.525;

B.matrix[0][0] = 4.525;
B.matrix[0][1] = 5.525;
B.matrix[1][0] = -6.525;
B.matrix[1][1] = -7.525;

int res = sub_matrix(&A, &B, &C);

D.matrix[0][0] = -4.0;
D.matrix[0][1] = -4.0;
D.matrix[1][0] = 9.05;
D.matrix[1][1] = 11.05;

ck_assert_int_eq(eq_matrix(&C, &D), SUCCESS);
remove_matrix(&A);
remove_matrix(&B);
remove_matrix(&C);
remove_matrix(&D);

#test sub_2
matrix_t A = {0}, B = {0}, C = {0};
create_matrix(2, 2, &A);
create_matrix(2, 1, &B);

A.matrix[0][0] = 0.525;
A.matrix[0][1] = 1.525;
A.matrix[1][0] = 2.525;
A.matrix[1][1] = 3.525;

B.matrix[0][0] = 4.525;
B.matrix[1][0] = -6.525;

int res = sub_matrix(&A, &B, &C);

ck_assert_int_eq(res, CALCULATION_ERROR);
remove_matrix(&A);
remove_matrix(&B);

#test sub_3
matrix_t A = {0}, B = {0}, C = {0};
create_matrix(2, 2, &A);
create_matrix(2, 0, &B);
int res = sub_matrix(&A, &B, &C);
ck_assert_int_eq(res, INCORRECT_MATRIX);
remove_matrix(&A);

#test mult_number_1
matrix_t A = {0}, B = {0}, C = {0};
double number = 5.0;
create_matrix(2, 2, &A);
create_matrix(2, 2, &C);

A.matrix[0][0] = 0.525;
A.matrix[0][1] = 1.525;
A.matrix[1][0] = -2.525;
A.matrix[1][1] = -3.525;

int res = mult_number(&A, number, &B);

C.matrix[0][0] = 2.625;
C.matrix[0][1] = 7.625;
C.matrix[1][0] = -12.625;
C.matrix[1][1] = -17.625;

ck_assert_int_eq(eq_matrix(&B, &C), SUCCESS);
remove_matrix(&A);
remove_matrix(&B);
remove_matrix(&C);

#test mult_number_2
matrix_t A = {0}, B = {0};
double number = 5.0;
create_matrix(0, 2, &A);
int res = mult_number(&A, number, &B);
ck_assert_int_eq(res, INCORRECT_MATRIX);

#test mult_matrix_1
matrix_t A = {0}, B = {0}, C = {0}, D = {0};
create_matrix(2, 3, &A);
create_matrix(3, 2, &B);
create_matrix(2, 2, &D);

A.matrix[0][0] = 0.525;
A.matrix[0][1] = 1.525;
A.matrix[0][2] = 2.525;
A.matrix[1][0] = 3.525;
A.matrix[1][1] = 4.525;
A.matrix[1][2] = 5.525;

B.matrix[0][0] = 6.525;
B.matrix[0][1] = 7.525;
B.matrix[1][0] = -8.525;
B.matrix[1][1] = -9.525;
B.matrix[2][0] = -10.525;
B.matrix[2][1] = -11.525;

int res = mult_matrix(&A, &B, &C);

D.matrix[0][0] = -36.150625;
D.matrix[0][1] = -39.675625;
D.matrix[1][0] = -73.725625;
D.matrix[1][1] = -80.250625;

ck_assert_int_eq(eq_matrix(&C, &D), SUCCESS);
remove_matrix(&A);
remove_matrix(&B);
remove_matrix(&C);
remove_matrix(&D);

#test mult_matrix_2
matrix_t A = {0}, B = {0}, C = {0};
create_matrix(2, 3, &A);
create_matrix(3, 0, &B);
int res = mult_matrix(&A, &B, &C);
ck_assert_int_eq(res, INCORRECT_MATRIX);
remove_matrix(&A);

#test mult_matrix_3
matrix_t A = {0}, B = {0}, C = {0};
create_matrix(2, 3, &A);
create_matrix(2, 3, &B);
int res = mult_matrix(&A, &B, &C);
ck_assert_int_eq(res, CALCULATION_ERROR);
remove_matrix(&A);
remove_matrix(&B);

#test transpose_1
matrix_t A = {0}, B = {0}, C = {0};
create_matrix(3, 2, &A);
create_matrix(2, 3, &C);

A.matrix[0][0] = 0.525;
A.matrix[0][1] = 1.525;
A.matrix[1][0] = 2.525;
A.matrix[1][1] = 3.525;
A.matrix[2][0] = 4.525;
A.matrix[2][1] = 5.525;

int res = transpose(&A, &B);

C.matrix[0][0] = 0.525;
C.matrix[0][1] = 2.525;
C.matrix[0][2] = 4.525;
C.matrix[1][0] = 1.525;
C.matrix[1][1] = 3.525;
C.matrix[1][2] = 5.525;

ck_assert_int_eq(eq_matrix(&B, &C), SUCCESS);
remove_matrix(&A);
remove_matrix(&B);
remove_matrix(&C);

#test transpose_2
matrix_t A = {0}, B = {0};
create_matrix(3, 0, &A);

int res = transpose(&A, &B);

ck_assert_int_eq(res, INCORRECT_MATRIX);
remove_matrix(&A);

#test determinant_1
matrix_t A = {0};
double det = 0.0;
create_matrix(1, 1, &A);

A.matrix[0][0] = 0.525;

int res = determinant(&A, &det);

double true_det = 0.525;

ck_assert_int_eq(fabs(true_det - det) < 1e-7, 1);
ck_assert_int_eq(res, OK);
remove_matrix(&A);

#test determinant_2
matrix_t A = {0};
double det = 0.0;
create_matrix(2, 2, &A);

A.matrix[0][0] = 0.525;
A.matrix[0][1] = 1.525;
A.matrix[1][0] = 2.525;
A.matrix[1][1] = 3.525;

int res = determinant(&A, &det);

double true_det = -2.0;

ck_assert_int_eq(fabs(true_det - det) < 1e-7, 1);
ck_assert_int_eq(res, OK);
remove_matrix(&A);

#test determinant_3
matrix_t A = {0};
double det = 0.0;
create_matrix(3, 3, &A);

A.matrix[0][0] = 0.525;
A.matrix[0][1] = 1.525;
A.matrix[0][2] = 2.525;
A.matrix[1][0] = 3.525;
A.matrix[1][1] = 4.525;
A.matrix[1][2] = 5.525;
A.matrix[2][0] = 6.525;
A.matrix[2][1] = 7.525;
A.matrix[2][2] = 8.525;

int res = determinant(&A, &det);

double true_det = 0.0;

ck_assert_int_eq(fabs(true_det - det) < 1e-7, 1);
ck_assert_int_eq(res, OK);
remove_matrix(&A);

#test determinant_4
matrix_t A = {0};
double det = 0.0;
create_matrix(2, 0, &A);
int res = determinant(&A, &det);
ck_assert_int_eq(res, INCORRECT_MATRIX);

#test determinant_5
matrix_t A = {0};
double det = 0.0;
create_matrix(3, 2, &A);

A.matrix[0][0] = 0.525;
A.matrix[0][1] = 1.525;
A.matrix[1][0] = 2.525;
A.matrix[1][1] = 3.525;
A.matrix[2][0] = 4.525;
A.matrix[2][1] = 5.525;

int res = determinant(&A, &det);
ck_assert_int_eq(res, CALCULATION_ERROR);
remove_matrix(&A);

#test determinant_6
matrix_t A = {0};
double det = 0.0;
create_matrix(5, 5, &A);

A.matrix[0][0] = 0.525;
A.matrix[0][1] = 1.525;
A.matrix[0][2] = 2.525;
A.matrix[0][3] = 3.525;
A.matrix[0][4] = 4.525;
A.matrix[1][0] = 3.525;
A.matrix[1][1] = 4.525;
A.matrix[1][2] = 5.525;
A.matrix[1][3] = 6.525;
A.matrix[1][4] = 7.525;
A.matrix[2][0] = 6.525;
A.matrix[2][1] = 7.525;
A.matrix[2][2] = 8.525;
A.matrix[2][3] = 9.525;
A.matrix[2][4] = 10.525;
A.matrix[3][0] = 9.525;
A.matrix[3][1] = 10.525;
A.matrix[3][2] = 11.525;
A.matrix[3][3] = 12.525;
A.matrix[3][4] = 13.525;
A.matrix[4][0] = 12.525;
A.matrix[4][1] = 13.525;
A.matrix[4][2] = 14.525;
A.matrix[4][3] = 15.525;
A.matrix[4][4] = 16.525;

int res = determinant(&A, &det);

double true_det = 0.0;

ck_assert_int_eq(fabs(true_det - det) < 1e-7, 1);
ck_assert_int_eq(res, OK);
remove_matrix(&A);

#test calc_comp_1
matrix_t A = {0}, B = {0}, C = {0};
create_matrix(1, 1, &A);
create_matrix(1, 1, &C);

A.matrix[0][0] = 0.525;

int res = calc_complements(&A, &B);

C.matrix[0][0] = 1.0;

ck_assert_int_eq(eq_matrix(&B, &C), SUCCESS);
ck_assert_int_eq(res, OK);
remove_matrix(&A);
remove_matrix(&B);
remove_matrix(&C);

#test calc_comp_2
matrix_t A = {0}, B = {0}, C = {0};
create_matrix(2, 2, &A);
create_matrix(2, 2, &C);

A.matrix[0][0] = 0.525;
A.matrix[0][1] = 1.525;
A.matrix[1][0] = 2.525;
A.matrix[1][1] = 3.525;

int res = calc_complements(&A, &B);

C.matrix[0][0] = 3.525;
C.matrix[0][1] = -2.525;
C.matrix[1][0] = -1.525;
C.matrix[1][1] = 0.525;

ck_assert_int_eq(eq_matrix(&B, &C), SUCCESS);
ck_assert_int_eq(res, OK);
remove_matrix(&A);
remove_matrix(&B);
remove_matrix(&C);

#test calc_comp_3
matrix_t A = {0}, B = {0};
create_matrix(3, 2, &A);

A.matrix[0][0] = 0.525;
A.matrix[0][1] = 1.525;
A.matrix[1][0] = 2.525;
A.matrix[1][1] = 3.525;
A.matrix[2][0] = 4.525;
A.matrix[2][1] = 5.525;

int res = calc_complements(&A, &B);

ck_assert_int_eq(res, CALCULATION_ERROR);
remove_matrix(&A);

#test calc_comp_4
matrix_t A = {0}, B = {0};
create_matrix(0, 2, &A);

int res = calc_complements(&A, &B);

ck_assert_int_eq(res, INCORRECT_MATRIX);

#test inverse_1
matrix_t A = {0}, B = {0}, C = {0};
create_matrix(1, 1, &A);
create_matrix(1, 1, &C);

A.matrix[0][0] = 0.525;

int res = inverse_matrix(&A, &B);

C.matrix[0][0] = 1.904762;

ck_assert_int_eq(eq_matrix(&B, &C), SUCCESS);
ck_assert_int_eq(res, OK);
remove_matrix(&A);
remove_matrix(&B);
remove_matrix(&C);

#test inverse_2
matrix_t A = {0}, B = {0}, C = {0};
create_matrix(2, 2, &A);
create_matrix(2, 2, &C);

A.matrix[0][0] = 0.525;
A.matrix[0][1] = 1.525;
A.matrix[1][0] = 2.525;
A.matrix[1][1] = 3.525;

int res = inverse_matrix(&A, &B);

C.matrix[0][0] = -1.7625;
C.matrix[0][1] = 0.7625;
C.matrix[1][0] = 1.2625;
C.matrix[1][1] = -0.2625;

ck_assert_int_eq(eq_matrix(&B, &C), SUCCESS);
ck_assert_int_eq(res, OK);
remove_matrix(&A);
remove_matrix(&B);
remove_matrix(&C);

#test inverse_3
matrix_t A = {0}, B = {0}, C = {0};
create_matrix(0, 2, &A);
int res = inverse_matrix(&A, &B);
ck_assert_int_eq(res, INCORRECT_MATRIX);

#test inverse_4
matrix_t A = {0}, B = {0};
double det = 0.0;
create_matrix(5, 5, &A);

A.matrix[0][0] = 0.525;
A.matrix[0][1] = 1.525;
A.matrix[0][2] = 2.525;
A.matrix[0][3] = 3.525;
A.matrix[0][4] = 4.525;
A.matrix[1][0] = 3.525;
A.matrix[1][1] = 4.525;
A.matrix[1][2] = 5.525;
A.matrix[1][3] = 6.525;
A.matrix[1][4] = 7.525;
A.matrix[2][0] = 6.525;
A.matrix[2][1] = 7.525;
A.matrix[2][2] = 8.525;
A.matrix[2][3] = 9.525;
A.matrix[2][4] = 10.525;
A.matrix[3][0] = 9.525;
A.matrix[3][1] = 10.525;
A.matrix[3][2] = 11.525;
A.matrix[3][3] = 12.525;
A.matrix[3][4] = 13.525;
A.matrix[4][0] = 12.525;
A.matrix[4][1] = 13.525;
A.matrix[4][2] = 14.525;
A.matrix[4][3] = 15.525;
A.matrix[4][4] = 16.525;

int res = inverse_matrix(&A, &B);

ck_assert_int_eq(res, CALCULATION_ERROR);
remove_matrix(&A);